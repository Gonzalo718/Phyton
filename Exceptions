*******************************
Manejo de excepciones
*******************************
nos permite capturar y manejar errores de manera controlada 
___________________________________________________________________________________________________________
RAISE                                                                                                                                            https://realpython.com/python-exceptions/

Con el raise Palabra clave: puedes generar cualquier objeto de excepción en Python y detener tu programa cuando ocurre una condición no deseada

number = 10
if number > 5:
    raise Exception(f"The number should not exceed 5. ({number=})")
print(number)

_____________________________________________________________________________________________________________________________________________________
ASSERT  

Si la condición resulta ser False, entonces su programa genera un AssertionError excepción y se detiene de inmediato

number = 1
assert (number < 5), f"The number should not exceed 5. ({number=})"
print(number)

_____________________________________________________________________________________________________________________________________________________
TRY y EXCEPT

bloque para capturar y manejar excepciones.

try:
    linux_interaction()
except RuntimeError as error:
    print(error)
    print("The linux_interaction() function wasn't executed.")

_____________________________________________________________________________________________________________________________________________________
TRY , EXCEPT y ELSE

try:
    linux_interaction()
except RuntimeError as error:
    print(error)
else:
    print("Doing even more Linux things.")

_____________________________________________________________________________________________________________________________________________________
TRY , EXCEPT , ELSE y FINALLY

acción para limpiar después de ejecutar tu código

try:
    linux_interaction()
except RuntimeError as error:
    print(error)
else:
    try:
        with open("file.log") as file:
            read_data = file.read()
    except FileNotFoundError as fnf_error:
        print(fnf_error)
finally:
    print("Cleaning up, irrespective of any exceptions.")
___________________________________________________________________________________________________
Finally

El bloque finally es opcional y se ejecuta siempre, independientemente de si ocurrió una excepción o no. Se utiliza comúnmente para realizar tareas de limpieza o liberación de recursos.

try:
    # Código que puede generar una excepción
    archivo = open("archivo.txt", "r")
    # Realizar operaciones con el archivo
except FileNotFoundError:
    print("Error: Archivo no encontrado")
finally:
    archivo.close()  # Cerrar el archivo siempre, incluso si ocurre una excepción
____________________________________________________________________________________________________
Except

El bloque except especifica el tipo de excepción que se desea capturar y manejar. Puedes tener múltiples bloques except para manejar diferentes tipos de excepciones.

try:
    # Código que puede generar una excepción
    resultado = 10 / 0  # División por cero
    print(resultado)
except ZeroDivisionError:
    print("Error: División por cero")
except ValueError:
    print("Error: Valor inválido")
________________________________________________________________________________________________
Try

El bloque try contiene el código que puede generar una excepción. Si ocurre una excepción dentro del bloque try, el flujo de ejecución se transfiere al bloque except correspondiente.

try:
    # Código que puede generar una excepción
    resultado = 10 / 0  # División por cero
    print(resultado)
except ZeroDivisionError:
    print("Error: División por cero")
_______________________________________________________________________________________________
