Conjuntos (set)

Un conjunto es una estructura de datos mutable y no ordenada que permite almacenar una colección de elementos únicos. 
Los conjuntos se encierran entre llaves {} o se crean utilizando la función set().
________________________________________________________________________________________________________________________
Para crear un conjunto, utiliza llaves o la función set():

frutas = {"manzana", "banana", "naranja"}
numeros = set([1, 2, 3, 4, 5])
________________________________________________________________________________________________________________________
Métodos de conjuntos

Los conjuntos en Python tienen varios métodos incorporados para manipular y acceder a los elementos. Algunos métodos comunes son:

add(elemento): agrega un elemento al conjunto.
remove(elemento): elimina un elemento del conjunto. Si el elemento no existe, genera un error.
discard(elemento): elimina un elemento del conjunto si está presente. Si el elemento no existe, no hace nada.
clear(): elimina todos los elementos del conjunto.
Ejemplo:

frutas = {"manzana", "banana", "naranja"}

frutas.add("pera")
print(frutas)  # Imprime {"manzana", "banana", "naranja", "pera"}

frutas.remove("banana")
print(frutas)  # Imprime {"manzana", "naranja", "pera"}

frutas.discard("uva")
print(frutas)  # Imprime {"manzana", "naranja", "pera"}

frutas.clear()
print(frutas)  # Imprime set()
_______________________________________________________________________________________________________________________
Set Union

 {1, 2, 3, 4, 5}
 
# Set union using .union()
print(A.union(B))
 
# Set union using the | operator
print(A | B)
 
# Output:
# {1, 2, 3, 4, 5, 6, 8}

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Set Intersection

A = {1, 2, 4, 6, 8}
B = {1, 2, 3, 4, 5}
 
# Use the method
print(A.intersection(B))
 
# Use the & operator
print(A & B)
 
# Output:
# {1, 2, 4}
_::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Set Difference

A = {1, 2, 4, 6, 8}
B = {1, 2, 3, 4, 5}
 
# Use the method
print(A.difference(B))
 
# Use the - operator
print(A - B)
 
# Output:
# {6, 8}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Supersets, Subsets, and Membership Using Python Sets

A = {1, 2, 3, 4, 5}
B = {1, 2, 4}
 
print(A.issuperset(B))
# Output: True
 
print(B.issubset(A))
# Output: True
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Creating and Manipulating Sets in Python

There are a few ways to create sets in Python. One way is to define a set literal using curly braces, much like we have been doing so far:

S = {1, 10, 100}
Another alternative is to pass a sequence to the set() function, like a list:

S = set([1, 10, 100])
Note that the set() function is also the only way to initialize an empty set, should you need it:

empty_set = set()
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
ADD Y REMOVE

Once a set is created, you can modify it using the .add() and .remove() methods:

S = set()
 
S.add(2)
print(S)
# Output: {2}
 
S.remove(2)
print(S)
# Output: set()
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
COPY Y CLEAR

S1 = {1, 2, 3}
S2 = S1.copy()  # independent copy of S1
S1.clear()
 
print(S1)
# Output: set()
 
print(S2)
# Output: {1, 2, 3}
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


